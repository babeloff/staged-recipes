# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json

context:
  name: hydra-haskell
  version: "0.12.0"

package:
  name: ${{ name }}
  version: ${{ version }}

source:
  # url: https://github.com/CategoricalData/hydra/archive/refs/heads/main.tar.gz
  url: https://github.com/CategoricalData/hydra/archive/refs/tags/${{ version }}.tar.gz
  sha256: 2fbfd7e25bd876fe83d66a9fc0b0c0193a55f34441642b74dede9fdaf4a0a2df

build:
  number: 0
  # Skip Windows builds - GHC is not available as a conda package on Windows
  skip:
    - win
  script:
    interpreter: nushell
    content: |
      # Build the Haskell package using Stack
      cd ($env.SRC_DIR | path join "hydra-haskell")

      # macOS-specific configuration to fix GHC linker issues
      if ($env.target_platform | str contains "osx") {
        # Set proper compiler environment variables for macOS
        $env.CC = "clang"
        $env.CXX = "clang++"
        $env.MACOSX_DEPLOYMENT_TARGET = "10.13"

        # Ensure we have proper SDK path
        $env.SDKROOT = (xcrun --show-sdk-path)

        # Create a properly formatted stack.yaml with macOS-specific options
        # Read the macOS configuration template
        let macos_config = open ($env.RECIPE_DIR | path join "stack-macos.yaml")

        # Backup existing stack.yaml if present
        if ("stack.yaml" | path exists) {
          echo "\n\n# macOS-specific build configurations added by conda-forge\n" | save --append stack.yaml
        } else {
          echo "# Stack configuration for conda-forge build\nresolver: lts\n\n# macOS-specific build configurations\n" | save stack.yaml
        }
        open stack-macos.yaml | save --append stack.yaml

        # Validate the merged YAML syntax
        try {
          let test_parse = open stack.yaml | from yaml
          print "[+] stack.yaml syntax validation passed"
        } catch {
          print "[-] stack.yaml syntax validation failed - attempting to fix..."
          if ("stack.yaml.bak" | path exists) {
            mv stack.yaml.bak stack.yaml
            print "Restored original stack.yaml"
          }
        }

        # Debug: show current directory and files
        print $"Current working directory: (pwd)"
        ls | print

        # Build with modified stack configuration
        ^stack build --no-test --local-bin-path ($env.PREFIX | path join "bin")
        ^stack install --local-bin-path ($env.PREFIX | path join "bin")

      } else {
        # For non-macOS, use existing stack.yaml and build normally
        ^stack build --no-test --local-bin-path ($env.PREFIX | path join "bin")
        ^stack install --local-bin-path ($env.PREFIX | path join "bin")
      }

      # Create library directory
      mkdir ($env.PREFIX | path join "lib" "hydra-haskell")

      # Copy built artifacts
      if (".stack-work/dist" | path exists) {
        glob ".stack-work/dist/**/*.a" | each { |file|
          cp $file ($env.PREFIX | path join "lib" "hydra-haskell")
        }
        glob ".stack-work/dist/**/*.so" | each { |file|
          cp $file ($env.PREFIX | path join "lib" "hydra-haskell")
        }
        glob ".stack-work/dist/**/*.dylib" | each { |file|
          cp $file ($env.PREFIX | path join "lib" "hydra-haskell")
        }
      }

      # Copy documentation
      if ("CHANGELOG.md" | path exists) { cp CHANGELOG.md $env.PREFIX }
      if ("LICENSE" | path exists) { cp LICENSE $env.PREFIX }
      if ("README.md" | path exists) { cp README.md $env.PREFIX }

      # Copy package configuration
      if ("package.yaml" | path exists) { cp package.yaml ($env.PREFIX | path join "lib" "hydra-haskell") }
      if ("stack.yaml" | path exists) { cp stack.yaml ($env.PREFIX | path join "lib" "hydra-haskell") }

requirements:
  build:
    - ghc >=8.10,<9.8
    - stack >=2.7,<3.0
    - nushell >=0.80,<1.0
    - if: osx
      then:
        - ${{ stdlib("c") }}
        - ${{ compiler("c") }}
        - ${{ compiler("cxx") }}
  host:
    - ghc >=8.10,<9.8
    - stack >=2.7,<3.0
  run:
    - ghc >=8.10,<9.8

tests:
  - package_contents:
      files:
        - lib/hydra-haskell/*
        # - bin/hydra-haskell
  - script:
      - ghc --version
      - hydra-haskell --help || echo "Hydra Haskell library installed"
    requirements:
      build:
        - python >=3.8,<4.0
        - ghc >=8.10,<9.8
      run:
        - python >=3.8,<4.0
        - ghc >=8.10,<9.8
  - script: test_hydra_diagnostic.py

about:
  homepage: https://github.com/CategoricalData/hydra
  license: Apache-2.0
  license_file: LICENSE
  summary: Hydra Haskell implementation - type-safe transformations for data and programs
  description: |
    Hydra is a domain-specific language for data models and data transformations.
    It is based on a typed lambda calculus, and transforms data and schemas between
    languages in a way which maintains type conformance. This package contains the
    Haskell implementation of Hydra.
  repository: https://github.com/CategoricalData/hydra
  documentation: https://github.com/CategoricalData/hydra/tree/main/hydra-haskell

extra:
  recipe-maintainers:
    - joshsh
    - phreed
